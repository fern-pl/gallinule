
/* ====== rTm ====== */
0x0f 0x01 0xd5 xend
0xc6 0xf8 i8 xabort i8
0xc7 0xf8 i16 xbegin i16
0xc7 0xf8 i32 xbegin i32
0x0f 0x01 0xd6 xtest
/* ====== INVPCID ====== */

0x0f 0x38 0x82 $0 $1 invpcid r32 m128
0x0f 0x38 0x82 $0 $1 invpcid r64 m128
/* ====== HLE ====== */

xacquire size_t size 
{
buffer = buffer[0.. buffer.length - size ]~0xf2~buffer[ buffer.length - size ..$];
return size 1;
}

xacquire_lock size_t size 
{
buffer = buffer[0.. buffer.length - size ]~0xf2~0xf0~buffer[ buffer.length - size ..$];
return size 2;
}

xiease size_t size 
{
buffer = buffer[0.. buffer.length - size ]~0xf3~buffer[ buffer.length - size ..$];
return size 1;
}
/* ====== BmI1 ====== */


/* ====== SGX ====== */

/* ====== mON ====== */

/* ====== VmX ====== */


/* ====== SmX ====== */

/* ====== CX16 ====== */


/* ====== POPCNT ====== */


/* ====== XSAVE ====== */

/* ====== rDrAND ====== */


/* ====== fPU ====== */
0xd9 0xe1 fabs
0xd9 0xe0 fchs
0x9b 0xdb 0xe2 fclex
0xdb 0xe2 fnclex

0xd8 $0 fadd m32 /r
0xdc $0 fadd m64 /r
fadd ST ST 
{
if .index == 
0xd8 0xc0 $1 emit! /e
else if .index == 
0xdc 0xc0 $0 emit! /e
else
assert "Cannot encode 'fadd' with no 'st0' operand!" 
}
0xde 0xc0 $0 faddp ST /e
0xde $0 fiadd m16 /r
0xda $0 fiadd m32 /r

0xdf $0 fbld m80 /4 /r
0xdf $0 fbstp m80 /6 /r

0xd8 $0 fcom m32 /2 /r
0xdc $0 fcom m64 /2 /r
0xd8 0xd0 $0 fcom ST /2 /e

0xd8 $0 fcomp m32 /3 /r
0xdc $0 fcomp m64 /3 /r
0xd8 0xd8 $0 fcomp ST /2 /e
0xde 0xd9 fcompp

0xdb 0xf0 $0 fcomi ST /e
0xdf 0xf0 $0 fcomip ST /e
0xdb 0xe8 $0 fucomi ST /e
0xdf 0xe8 $0 fucomip ST /e

0xde $0 ficom m16 /2 /r
0xda $0 ficom m32 /2 /r
0xde $0 ficomp m16 /2 /r
0xda $0 ficomp m32 /2 /r

0xdd 0xe0 $0 fucom ST /2 /e
0xdd 0xe8 $0 fucomp ST /2 /e
0xda 0xe9 fucompp
0xd9 0xe4 ftst
0xd9 0xf0 f2xm1
0xd9 0xf1 fyl2x
0xd9 0xf9 fyl2xp1
0xd9 0xff fcos
0xd9 0xfe fsin
0xd9 0xfb fsincos
0xd9 0xfa fsqrt
0xd9 0xf2 fptan
0xd9 0xf3 fpatan
0xd9 0xf8 fprem
0xd9 0xf5 fprem1
0xd9 0xf6 fdecstp
0xd9 0xf7 fincstp

0xdf $0 fild m16 /r
0xdb $0 fild m32 /r
0xdf $0 fild m64 /5 /r

0xdf $0 fist m16 /2 /r
0xdb $0 fist m32 /2 /r

0xdf $0 fistp m16 /3 /r
0xdb $0 fistp m32 /3 /r
0xdf $0 fistp m64 /7 /r

0xdf $0 fisttp m16 /1 /r
0xdb $0 fisttp m32 /1 /r
0xdd $0 fisttp m64 /1 /r

0xd9 $0 fldcw m16 /5 /r
0x9b 0xd9 $0 fstcw m16 /7 /r
0xd9 $0 fnstcw m16 /7 /r

0xd9 $0 fldenv m112 /4 /r
0xd9 $0 fldenv m224 /4 /r

0x9b 0xd9 $0 fstenv m112 /6 /r
0x9b 0xd9 $0 fstenv m224 /6 /r

0xd9 $0 fnstenv m112 /6 /r
0xd9 $0 fnstenv m224 /6 /r

0x9b 0xdd $0 fstsw m16 /7 /r
0x9b 0xdf 0xe0 fstsw
0xdd $0 fnstsw m16 /7 /r
0xdf 0xe0 fnstsw

0xd9 $0 fld m32 /r
0xdd $0 fld m64 /r
0xdb $0 fld m80 /5 /r
0xd9 0xc0 $0 fld ST /e
0xd9 0xe8 fld1
0xd9 0xe9 fldl2t
0xd9 0xea fldl2e
0xd9 0xeb fldpi
0xd9 0xec fldlg2
0xd9 0xed fldln2
0xd9 0xee fldz

0xd9 $0 fst m32 /2 /r
0xdd $0 fst m64 /2 /r
0xdd 0xd0 $0 fst ST /e

0xd9 $0 fstp m32 /3 /r
0xdd $0 fstp m64 /3 /r
0xdb $0 fstp m80 /7 /r
0xdd 0xd8 $0 fstp ST /e

0xd8 $0 fdiv m32 /6 /r
0xdc $0 fdiv m64 /6 /r
fdiv ST ST 
{
if .index == 
0xd8 0xf0 $1 emit! /e
else if .index == 
0xdc 0xf8 $0 emit! /e
else
assert "Cannot encode 'fadd' with no 'st0' operand!" 
}
0xde 0xf8 $0 fdivp ST /e
0xde $0 fidiv m16 /6 /r
0xda $0 fidiv m32 /6 /r

0xd8 $0 fdivr m32 /7 /r
0xdc $0 fdivr m64 /7 /r
fdivr ST ST 
{
if .index == 
0xd8 0xf8 $1 emit! /e
else if .index == 
0xdc 0xf0 $0 emit! /e
else
assert "Cannot encode 'fadd' with no 'st0' operand!" 
}
0xde 0xf0 $0 fdivrp ST /e
0xde $0 fidivr m16 /7 /r
0xda $0 fidivr m32 /7 /r
0xd9 0xfd fscale
0xd9 0xfc frndint
0xd9 0xe5 fexam
0xdd 0xc0 $0 ffree ST /e
0xd9 0xc8 $0 fxch ST /e
0xd9 0xf4 fxtract
0xd9 0xd0 fnop
0x9b 0xdb 0xe3 fninit
0xdb 0xe3 finit

0x9b 0xdd $0 fsave m752 /6
0x9b 0xdd $0 fsave m864 /6

0xdd $0 fnsave m752 /6
0xdd $0 fnsave m864 /6

0xdd $0 frstor m752 /4
0xdd $0 frstor m864 /4
static if !X64 
0x0f 0xae $0 fxsave m4096 /r
static if X64 
0x48 0x0f 0xae $0 fxsave m4096 /r
static if !X64 
0x0f 0xae $0 fxrstor m4096 /1 /r
static if X64 
0x48 0x0f 0xae $0 fxrstor m4096 /1 /r

0xd8 $0 fmul m32 /1 /r
0xdc $0 fmul m64 /1 /r
fmul ST ST 
{
if .index == 
0xd8 0xc8 $1 emit! /e
else if .index == 
0xdc 0xc8 $0 emit! /e
else
assert "Cannot encode 'fadd' with no 'st0' operand!" 
}
0xde 0xc8 $0 fmulp ST /e
0xde $0 fimul m16 /1 /r
0xda $0 fimul m32 /1 /r

0xd8 $0 fsub m32 /4 /r
0xdc $0 fsub m64 /4 /r
fsub ST ST 
{
if .index == 
0xd8 0xe0 $1 emit! /e
else if .index == 
0xdc 0xe8 $0 emit! /e
else
assert "Cannot encode 'fadd' with no 'st0' operand!" 
}
0xde 0xe8 $0 fsubp ST /e
0xde $0 fisub m16 /4 /r
0xda $0 fisub m32 /4 /r

0xd8 $0 fsubr m32 /5 /r
0xdc $0 fsubr m64 /5 /r
fsubr ST ST 
{
if .index == 
0xd8 0xe8 $1 emit! /e
else if .index == 
0xdc 0xe0 $0 emit! /e
else
assert "Cannot encode 'fadd' with no 'st0' operand!" 
}
0xde 0xe0 $0 fsubrp ST /e
0xde $0 fisubr m16 /5 /r
0xda $0 fisubr m32 /5 /r

0xda 0xc0 $0 fcmovb ST /e
0xda 0xc8 $0 fcmove ST /e
0xda 0xd0 $0 fcmovbe ST /e
0xda 0xd8 $0 fcmovu ST /e
0xdb 0xc0 $0 fcmovnb ST /e
0xdb 0xc8 $0 fcmovne ST /e
0xdb 0xd0 $0 fcmovnbe ST /e
0xdb 0xd8 $0 fcmovnu ST /e
/* ====== TSC ====== */

/* ====== mSr ====== */

/* ====== CX8 ====== */


/* ====== SEP ====== */

/* ====== CmOV ====== */

0x0f 0x47 $0 $1 cmova r16 rm16
0x0f 0x47 $0 $1 cmova r32 rm32
0x0f 0x47 $0 $1 cmova r64 rm64

0x0f 0x43 $0 $1 cmovae r16 rm16
0x0f 0x43 $0 $1 cmovae r32 rm32
0x0f 0x43 $0 $1 cmovae r64 rm64

0x0f 0x42 $0 $1 cmovb r16 rm16
0x0f 0x42 $0 $1 cmovb r32 rm32
0x0f 0x42 $0 $1 cmovb r64 rm64

0x0f 0x46 $0 $1 cmovbe r16 rm16
0x0f 0x46 $0 $1 cmovbe r32 rm32
0x0f 0x46 $0 $1 cmovbe r64 rm64

0x0f 0x42 $0 $1 cmovc r16 rm16
0x0f 0x42 $0 $1 cmovc r32 rm32
0x0f 0x42 $0 $1 cmovc r64 rm64

0x0f 0x44 $0 $1 cmove r16 rm16
0x0f 0x44 $0 $1 cmove r32 rm32
0x0f 0x44 $0 $1 cmove r64 rm64

0x0f 0x4f $0 $1 cmovg r16 rm16
0x0f 0x4f $0 $1 cmovg r32 rm32
0x0f 0x4f $0 $1 cmovg r64 rm64

0x0f 0x4d $0 $1 cmovge r16 rm16
0x0f 0x4d $0 $1 cmovge r32 rm32
0x0f 0x4d $0 $1 cmovge r64 rm64

0x0f 0x4c $0 $1 cmovl r16 rm16
0x0f 0x4c $0 $1 cmovl r32 rm32
0x0f 0x4c $0 $1 cmovl r64 rm64

0x0f 0x4e $0 $1 cmovle r16 rm16
0x0f 0x4e $0 $1 cmovle r32 rm32
0x0f 0x4e $0 $1 cmovle r64 rm64

0x0f 0x46 $0 $1 cmovna r16 rm16
0x0f 0x46 $0 $1 cmovna r32 rm32
0x0f 0x46 $0 $1 cmovna r64 rm64

0x0f 0x42 $0 $1 cmovnae r16 rm16
0x0f 0x42 $0 $1 cmovnae r32 rm32
0x0f 0x42 $0 $1 cmovnae r64 rm64

0x0f 0x43 $0 $1 cmovnb r16 rm16
0x0f 0x43 $0 $1 cmovnb r32 rm32
0x0f 0x43 $0 $1 cmovnb r64 rm64

0x0f 0x47 $0 $1 cmovnbe r16 rm16
0x0f 0x47 $0 $1 cmovnbe r32 rm32
0x0f 0x47 $0 $1 cmovnbe r64 rm64

0x0f 0x43 $0 $1 cmovnc r16 rm16
0x0f 0x43 $0 $1 cmovnc r32 rm32
0x0f 0x43 $0 $1 cmovnc r64 rm64

0x0f 0x45 $0 $1 cmovne r16 rm16
0x0f 0x45 $0 $1 cmovne r32 rm32
0x0f 0x45 $0 $1 cmovne r64 rm64

0x0f 0x4e $0 $1 cmovng r16 rm16
0x0f 0x4e $0 $1 cmovng r32 rm32
0x0f 0x4e $0 $1 cmovng r64 rm64

0x0f 0x4c $0 $1 cmovnge r16 rm16
0x0f 0x4c $0 $1 cmovnge r32 rm32
0x0f 0x4c $0 $1 cmovnge r64 rm64

0x0f 0x4d $0 $1 cmovnl r16 rm16
0x0f 0x4d $0 $1 cmovnl r32 rm32
0x0f 0x4d $0 $1 cmovnl r64 rm64

0x0f 0x4f $0 $1 cmovnle r16 rm16
0x0f 0x4f $0 $1 cmovnle r32 rm32
0x0f 0x4f $0 $1 cmovnle r64 rm64

0x0f 0x41 $0 $1 cmovno r16 rm16
0x0f 0x41 $0 $1 cmovno r32 rm32
0x0f 0x41 $0 $1 cmovno r64 rm64

0x0f 0x4b $0 $1 cmovnp r16 rm16
0x0f 0x4b $0 $1 cmovnp r32 rm32
0x0f 0x4b $0 $1 cmovnp r64 rm64

0x0f 0x49 $0 $1 cmovns r16 rm16
0x0f 0x49 $0 $1 cmovns r32 rm32
0x0f 0x49 $0 $1 cmovns r64 rm64

0x0f 0x45 $0 $1 cmovnz r16 rm16
0x0f 0x45 $0 $1 cmovnz r32 rm32
0x0f 0x45 $0 $1 cmovnz r64 rm64

0x0f 0x40 $0 $1 cmovo r16 rm16
0x0f 0x40 $0 $1 cmovo r32 rm32
0x0f 0x40 $0 $1 cmovo r64 rm64

0x0f 0x4a $0 $1 cmovp r16 rm16
0x0f 0x4a $0 $1 cmovp r32 rm32
0x0f 0x4a $0 $1 cmovp r64 rm64

0x0f 0x4a $0 $1 cmovpe r16 rm16
0x0f 0x4a $0 $1 cmovpe r32 rm32
0x0f 0x4a $0 $1 cmovpe r64 rm64

0x0f 0x4b $0 $1 cmovpo r16 rm16
0x0f 0x4b $0 $1 cmovpo r32 rm32
0x0f 0x4b $0 $1 cmovpo r64 rm64

0x0f 0x48 $0 $1 cmovs r16 rm16
0x0f 0x48 $0 $1 cmovs r32 rm32
0x0f 0x48 $0 $1 cmovs r64 rm64

0x0f 0x44 $0 $1 cmovz r16 rm16
0x0f 0x44 $0 $1 cmovz r32 rm32
0x0f 0x44 $0 $1 cmovz r64 rm64
/* ====== CLfL ====== */

0x0f 0xae $0 clflush rm8 /7 /r
/* ====== HrESET ====== */


/* ====== CET ====== */
// Shadow stack instruction set.


/* ====== fSGSBASE ====== */


/* ====== rDPID ====== */


/* ====== OSPKE ====== */

/* ======r ====== */

/* ====== WAITPKG ====== */


/* ====== CLDEmOTE ====== */

/* ====== TSXLDTrK ====== */

/* ====== SErALIZE ====== */

/* ====== PCONfIG ====== */

/* ====== PmC ====== */

/* ====== UmIP ====== */

/* ====== PCID ====== */

/* ====== LAHf-SAHf ====== */

/* ====== BmI2 ====== */

/* ====== r64 ====== */
0x0f 0x6f $0 $1 movq r64 rm64 /r /f
0x0f 0x7f $0 $1 movq m64 r64 /r /f
0x0f 0x6e $0 $1 movd r64 rm32 /r /f
0x0f 0x7e $0 $1 movd rm32 r64 /r /f
0x0f 0x6e $0 $1 movq r64 rm64
0x0f 0x7e $0 $1 movq rm r64 rm64
/* ====== /r /f ====== */

/* ====== SSE2 ====== */

/* ====== SSE3 ====== */

/* ====== AVX ====== */
vex1 0x66p 0x58 $0 $1 $2 vaddpd r128 r128 rm12828
vex2 0x66p 0x58 $0 $1 $2 vaddpd r256 r256 rm25656
vex1 0x58 $0 $1 $2 vaddps r128 r128 rm12828
vex2 0x58 $0 $1 $2 vaddps r256 r256 rm25656
vex1 0x58 $0 $1 $2 vaddsd r128 r128 rm /1286428xf2
vex1 0x58 $0 $1 $2 vaddss r128 r128 rm /1283228xf3
vex1 0x66p 0xd0 $0 $1 $2 vaddsubpd r128 r128 rm12828
vex2 0x66p 0xd0 $0 $1 $2 vaddsubpd r256 r256 rm25656
vex1 0xd0 $0 $1 $2 vaddsubps r128 r128 rm12828xf2
vex2 0xd0 $0 $1 $2 vaddsubps r256 r256 rm25656xf2
vex1 0x7e $0 $1 vmovq r128 rm /1286428xf3
vex1 0x66p 0xd6 $0 $1 vmovq m64 r12828

vex1 0x66p 0x6e $0 $1 vmovd r128 rm3228
vex1 0x66p 0x7e $0 $1 vmovd rm32 r12828

vex1 0x66p 0x6e $0 $1 vmovq r128 rm6428
vex1 0x66p 0x7e $0 $1 vmovq rm64 r12828
/* ====== AES ====== */

0x66 0x0f 0x38 0xde $0 $1 aesdec r128 rm128 /r /f
vex128 [38] 0x66p 0xde $0 $1 $2 vaesdec r128 r128 rm128
vex256 [38] 0x66p 0xde $0 $1 $2 vaesdec r256 r256 rm256
0xf3 0x0f 0x38 0xdd $0 $1 aesdec128kl r128 m384 /r /f
0xf3 0x0f 0x38 0xdf $0 $1 aesdec256kl r128 m512 /r /f

0x66 0x0f 0x38 0xdf $0 $1 aesdeclast r128 rm128 /r /f
vex128 [38] 0x66p 0xdf $0 $1 $2 vaesdeclast r128 r128 rm128
vex256 [38] 0x66p 0xdf $0 $1 $2 vaesdeclast r256 r256 rm256
0xf3 0x0f 0x38 0xd8 $0 ecx aesdecwide128kl m384 /r /f
0xf3 0x0f 0x38 0xd8 $0 ebx aesdecwide256kl m512 /r /f

0x66 0x0f 0x38 0xdc $0 $1 aesenc r128 rm128 /r /f
vex128 [38] 0x66p 0xdc $0 $1 $2 vaesenc r128 r128 rm128
vex256 [38] 0x66p 0xdc $0 $1 $2 vaesenc r256 r256 rm256
0xf3 0x0f 0x38 0xdc $0 $1 aesenc128kl r128 m384 /r /f
0xf3 0x0f 0x38 0xde $0 $1 aesenc256kl r128 m512 /r /f

0x66 0x0f 0x38 0xdd $0 $1 aesenclast r128 rm128 /r /f
vex128 [38] 0x66p 0xdd $0 $1 $2 vaesenclast r128 r128 rm128
vex256 [38] 0x66p 0xdd $0 $1 $2 vaesenclast r256 r256 rm256
0xf3 0x0f 0x38 0xd8 $0 eax aesencwide128kl m384 /r /f
0xf3 0x0f 0x38 0xd8 $0 edx aesencwide256kl m512 /r /f

0x66 0x0f 0x38 0xdb $0 $1 aesimc r128 rm128 /r /f
vex128 [38] 0x66p 0xdb $0 $1 vaesimc r128 rm128

0x66 0x0f 0x3a 0xdf $0 $1 i8 aeskeygenassist r128 rm128 i8 /r /f
vex128 [3a] 0x66p 0xdf $0 $1 i8 vaeskeygenassist r128 rm128 i8
/* ====== SHA ====== */

0x0f 0x38 0xc9 $0 $1 sha1msg1 r128 rm128 /r /f
0x0f 0x38 0xca $0 $1 sha1msg2 r128 rm128 /r /f
0x0f 0x38 0xc8 $0 $1 sha1nexte r128 rm128 /r /f

0x0f 0x38 0xcc $0 $1 sha256msg1 r128 rm128 /r /f

0x0f 0x3a 0xcc $0 $1 i8 sha1rnds4 r128 rm128 i8 /r /f

0x0f 0x38 0xcb $0 $1 sha256rnds2 r128 rm128 /r /f
/* ====== mAIN ====== */
// NOTE: Branch hints are generally useless in the modern day AmD CPUs don't even acknowledge them;
// and thus these should not be used on any modern CPU.

not_taken size_t size 
{
buffer = buffer[0.. buffer.length - size ]~0x2e~buffer[ buffer.length - size ..$];
return size 1;
}

taken size_t size 
{
buffer = buffer[0.. buffer.length - size ]~0x3e~buffer[ buffer.length - size ..$];
return size 1;
}

0xf2 0x0f 0x38 0xf0 $0 $1 crc32 r32 rm8
0xf2 0x0f 0x38 0xf1 $0 $1 crc32 r32 rm16
0xf2 0x0f 0x38 0xf1 $0 $1 crc32 r32 rm32

0xf2 0x0f 0x38 0xf0 $0 $1 crc32 r64 rm8
0xf2 0x0f 0x38 0xf1 $0 $1 crc32 r64 rm64
// literally 1984
// Why did I write this comment? What is literally 1984????
0xf2 0x0f 0x38 0xf8 $0 $1 enqcmd r32 m512
0xf2 0x0f 0x38 0xf8 $0 $1 enqcmd r64 m512

0x0f 0xb0 $0 $1 cmpxchg rm r8 rm8
0x0f 0xb1 $0 $1 cmpxchg rm r16 rm16
0x0f 0xb1 $0 $1 cmpxchg rm r32 rm32
0x0f 0xb1 $0 $1 cmpxchg rm r64 rm64
0x37 aaa
0xd5 0x0a aad
0xd5 i8 aad i8
0xd4 0x0a aam
0xd4 i8 aam i8
0x3f aas

0x04 i8 add i8
0x05 i16 add i16
0x05 i32 add i32

0x80 $0 i8 add rm i8 rm8
0x81 $0 i16 add rm i16 rm16
0x81 $0 i32 add rm i32 rm32
0x81 $0 i32 add rm i32 rm64
0x83 $0 i8 add rm i8 rm16
0x83 $0 i8 add rm i8 rm32
0x83 $0 i8 add rm i8 rm64

0x00 $0 $1 add rm r8 rm8
0x01 $0 $1 add rm r16 rm16
0x01 $0 $1 add rm r32 rm32
0x01 $0 $1 add rm r64 rm64

0x02 $0 $1 add r8 m8
0x03 $0 $1 add r16 m16
0x03 $0 $1 add r32 m32
0x03 $0 $1 add r64 m64

0x24 i8 and i8
0x25 i16 and i16
0x25 i32 and i32

0x80 $0 i8 and rm8 i8 /4
0x81 $0 i16 and rm16 i16 /4
0x81 $0 i32 and rm32 i32 /4
0x81 $0 i32 and rm64 i32 /4
0x83 $0 i8 and rm16 i8 /4
0x83 $0 i8 and rm32 i8 /4
0x83 $0 i8 and rm64 i8 /4

0x20 $0 $1 and rm r8 rm8
0x21 $0 $1 and rm r16 rm16
0x21 $0 $1 and rm r32 rm32
0x21 $0 $1 and rm r64 rm64

0x22 $0 $1 and r8 m8
0x23 $0 $1 and r16 m16
0x23 $0 $1 and r32 m32
0x23 $0 $1 and r64 m64

0x63 $0 $1 arpl rm r16 rm16

0x0f 0xbc $0 $1 bsf r16 rm16
0x0f 0xbc $0 $1 bsf r32 rm32
0x0f 0xbc $0 $1 bsf r64 rm64

0x0f 0xbd $0 $1 bsr r16 rm16
0x0f 0xbd $0 $1 bsr r32 rm32
0x0f 0xbd $0 $1 bsr r64 rm64

0x0f 0xc8 $0 bswap r32 /e
0x0f 0xc8 $0 bswap r64 /e

0x0f 0xa3 $0 $1 bt rm r16 rm16
0x0f 0xa3 $0 $1 bt rm r32 rm32
0x0f 0xa3 $0 $1 bt rm r64 rm64
0x0f 0xba $0 i8 bt rm16 i8 /4
0x0f 0xba $0 i8 bt rm32 i8 /4
0x0f 0xba $0 i8 bt rm64 i8 /4

0x0f 0xbb $0 $1 btc rm r16 rm16
0x0f 0xbb $0 $1 btc rm r32 rm32
0x0f 0xbb $0 $1 btc rm r64 rm64
0x0f 0xba $0 i8 btc rm16 i8 /7
0x0f 0xba $0 i8 btc rm32 i8 /7
0x0f 0xba $0 i8 btc rm64 i8 /7

0x0f 0xb3 $0 $1 btr rm r16 rm16
0x0f 0xb3 $0 $1 btr rm r32 rm32
0x0f 0xb3 $0 $1 btr rm r64 rm64
0x0f 0xba $0 i8 btr rm16 i8 /6
0x0f 0xba $0 i8 btr rm32 i8 /6
0x0f 0xba $0 i8 btr rm64 i8 /6

0x0f 0xab $0 $1 bts rm r16 rm16
0x0f 0xab $0 $1 bts rm r32 rm32
0x0f 0xab $0 $1 bts rm r64 rm64
0x0f 0xba $0 i8 bts rm16 i8 /5
0x0f 0xba $0 i8 bts rm32 i8 /5
0x0f 0xba $0 i8 bts rm64 i8 /5

0x3c i8 cmp i8
0x3d i16 cmp i16
0x3d i32 cmp i32

0x80 $0 i8 cmp rm8 i8 /7
0x81 $0 i16 cmp rm16 i16 /7
0x81 $0 i32 cmp rm32 i32 /7
0x81 $0 i32 cmp rm64 i32 /7
0x83 $0 i8 cmp rm16 i8 /7
0x83 $0 i8 cmp rm32 i8 /7
0x83 $0 i8 cmp rm64 i8 /7

0x38 $0 $1 cmp rm r8 rm8
0x39 $0 $1 cmp rm r16 rm16
0x39 $0 $1 cmp rm r32 rm32
0x39 $0 $1 cmp rm r64 rm64

0x3a $0 $1 cmp r8 m8
0x3b $0 $1 cmp r16 m16
0x3b $0 $1 cmp r32 m32
0x3b $0 $1 cmp r64 m64
0x66 0x99 cwd
0x99 cdq
0x48 0x99 cqo
0x66 0x98 cbw
0x98 cwde
0x48 0x98 cdqe
0x0f 0xa2 cpuid
cpuid i32 mov eax i32 cpuid 
0xf8 clc
0xfc cld
0xfa cli
0x0f 0x06 clts
0xf5 cmc

0xfe $0 dec rm8 /1
static if X64 
0xff $0 dec rm16 /1
static if !X64 
0xff $0 dec m16 /1
static if X64 
0xff $0 dec rm32 /1
static if !X64 
0xff $0 dec m32 /1
0xff $0 dec rm64 /1
static if !X64 
0x48 $0 dec r16 /e
static if !X64 
0x48 $0 dec r32 /e
0xcc int3
0xcd i8 _int i8
0xce into
0xf1 int1
0x0f 0xff $0 $1 ud0 r32 rm32
0x0f 0xb9 $0 $1 ud1 r32 rm32
0x0f 0x0b ud2
0xcf iret
0xcf iretd
0xcf iretq

0xfe $0 inc rm8
static if X64 
0xff $0 inc rm16
static if !X64 
0xff $0 inc m16
static if X64 
0xff $0 inc rm32
static if !X64 
0xff $0 inc m32
0xff $0 inc rm64
static if !X64 
0x40 $0 inc r16 /e
static if !X64 
0x40 $0 inc r32 /e
0xf4 hlt
0xf3 0x90 pause
0x0f 0x01 0xf8 swapgs

lock size_t size 
{
buffer = buffer[0.. buffer.length - size ]~0xf0~buffer[ buffer.length - size ..$];
return size 1;
}
0x9b wait
0x9b fwait
0x0f 0x07 sysretc
0x0f 0x07 sysret
0x0f 0x05 syscall
0x0f 0xaa rsm
0xc9 leave
0xc8 i16 0x00 enter i16
0xc8 i16 i8 enter i1/6 i8

0x8d $0 $1 lea r16 m16
0x8d $0 $1 lea r32 m32
0x8d $0 $1 lea r64 m64

0xc5 $0 $1 lds r16 m16
0xc5 $0 $1 lds r32 m32

0x0f 0xb2 $0 $1 lss r16 m16
0x0f 0xb2 $0 $1 lss r32 m32
0x0f 0xb2 $0 $1 lss r64 m64

0xc4 $0 $1 les r16 m16
0xc4 $0 $1 les r32 m32

0x0f 0xb4 $0 $1 lfs r16 m16
0x0f 0xb4 $0 $1 lfs r32 m32
0x0f 0xb4 $0 $1 lfs r64 m64

0x0f 0xb5 $0 $1 lgs r16 m16
0x0f 0xb5 $0 $1 lgs r32 m32
0x0f 0xb5 $0 $1 lgs r64 m64

0x0f 0x03 $0 $1 lsl r16 rm16
0x0f 0x03 $0 $1 lsl r32 r32
0x0f 0x03 $0 $1 lsl r64 r32
0x0f 0x03 $0 $1 lsl r32 m16
0x0f 0x03 $0 $1 lsl r64 m16

0x0f 0x00 $0 ltr rm16 /3
0x0f 0x00 $0 str rm16 /1

0xf6 $0 neg rm8 /3
0xf7 $0 neg rm16 /3
0xf7 $0 neg rm32 /3
0xf7 $0 neg rm64 /3
0x90 nop
0x0f 0x1f $0 nop rm16

0xf6 $0 not rm8 /2
0xf7 $0 not rm16 /2
0xf7 $0 not rm32 /2
0xf7 $0 not rm64 /2
0xc3 ret
0xc2 i16 ret i16
0xcb retf
0xca i16 retf i16
0xf9 stc
0xfd std
0xfb sti

0x2c i8 sub i8
0x2d i16 sub i16
0x2d i32 sub i32

0x80 $0 i8 sub rm8 i8 /5
0x81 $0 i16 sub rm16 i16 /5
0x81 $0 i32 sub rm32 i32 /5
0x81 $0 i32 sub rm64 i32 /5
0x83 $0 i8 sub rm16 i8 /5
0x83 $0 i8 sub rm32 i8 /5
0x83 $0 i8 sub rm64 i8 /5

0x28 $0 $1 sub rm r8 rm8
0x29 $0 $1 sub rm r16 rm16
0x29 $0 $1 sub rm r32 rm32
0x29 $0 $1 sub rm r64 rm64

0x2a $0 $1 sub r8 m8
0x2b $0 $1 sub r16 m16
0x2b $0 $1 sub r32 m32
0x2b $0 $1 sub r64 m64

0x1c i8 sbb i8
0x1d i16 sbb i16
0x1d i32 sbb i32

0x80 $0 i8 sbb rm8 i8 /3
0x81 $0 i16 sbb rm16 i16 /3
0x81 $0 i32 sbb rm32 i32 /3
0x81 $0 i32 sbb rm64 i32 /3
0x83 $0 i8 sbb rm16 i8 /3
0x83 $0 i8 sbb rm32 i8 /3
0x83 $0 i8 sbb rm64 i8 /3

0x18 $0 $1 sbb rm r8 rm8
0x19 $0 $1 sbb rm r16 rm16
0x19 $0 $1 sbb rm r32 rm32
0x19 $0 $1 sbb rm r64 rm64

0x1a $0 $1 sbb r8 m8
0x1b $0 $1 sbb r16 m16
0x1b $0 $1 sbb r32 m32
0x1b $0 $1 sbb r64 m64

0x34 i8 xor i8
0x35 i16 xor i16
0x35 i32 xor i32

0x80 $0 i8 xor rm8 i8 /6
0x81 $0 i16 xor rm16 i16 /6
0x81 $0 i32 xor rm32 i32 /6
0x81 $0 i32 xor rm64 i32 /6
0x83 $0 i8 xor rm16 i8 /6
0x83 $0 i8 xor rm32 i8 /6
0x83 $0 i8 xor rm64 i8 /6

0x30 $0 $1 xor rm r8 rm8
0x31 $0 $1 xor rm r16 rm16
0x31 $0 $1 xor rm r32 rm32
0x31 $0 $1 xor rm r64 rm64

0x32 $0 $1 xor r8 m8
0x33 $0 $1 xor r16 m16
0x33 $0 $1 xor r32 m32
0x33 $0 $1 xor r64 m64

0x0c i8 or i8
0x0d i16 or i16
0x0d i32 or i32

0x80 $0 i8 or rm8 i8 /1
0x81 $0 i16 or rm16 i16 /1
0x81 $0 i32 or rm32 i32 /1
0x81 $0 i32 or rm64 i32 /1
0x83 $0 i8 or rm16 i8 /1
0x83 $0 i8 or rm32 i8 /1
0x83 $0 i8 or rm64 i8 /1

0x8 $0 $1 or rm r8 rm8
0x9 $0 $1 or rm r16 rm16
0x9 $0 $1 or rm r32 rm32
0x9 $0 $1 or rm r64 rm64

0xa $0 $1 or r8 m8
0xb $0 $1 or r16 m16
0xb $0 $1 or r32 m32
0xb $0 $1 or r64 m64

0xd2 $0 cl sal rm8 /4
sal rm /8 i8 
{
if i8 == /1 
0xd0 $0 return emit!4
else
0xc0 $0 i8 return emit!4
}
0xd3 $0 cl sal rm16 /4
sal rm /16 i8 
{
if i8 == /1 
0xd1 $0 return emit!4
else
0xc1 $0 i8 return emit!4
}
0xd3 $0 cl sal rm32 /4
sal rm /32 i8 
{
if i8 == /1 
0xd1 $0 return emit!4
else
0xc1 $0 i8 return emit!4
}
0xd3 $0 cl sal rm64 /4
sal rm /64 i8 
{
if i8 == /1 
0xd1 $0 return emit!4
else
0xc1 $0 i8 return emit!4
}

0xd2 $0 cl sar rm8 /7
sar rm /8 i8 
{
if i8 == /1 
0xd0 $0 return emit!7
else
0xc0 $0 i8 return emit!7
}
0xd3 $0 cl sar rm16 /7
sar rm /16 i8 
{
if i8 == /1 
0xd1 $0 return emit!7
else
0xc1 $0 i8 return emit!7
}
0xd3 $0 cl sar rm32 /7
sar rm /32 i8 
{
if i8 == /1 
0xd1 $0 return emit!7
else
0xc1 $0 i8 return emit!7
}
0xd3 $0 cl sar rm64 /7
sar rm /64 i8 
{
if i8 == /1 
0xd1 $0 return emit!7
else
0xc1 $0 i8 return emit!7
}

shl rm /8 sal 
shl rm /8 i8 sal i8 
shl rm /16 sal 
shl rm /16 i8 sal i8 
shl rm /32 sal 
shl rm /32 i8 sal i8 
shl rm /64 sal 
shl rm /64 i8 sal i8 

0xd2 $0 cl shr rm8 /5
shr rm /8 i8 
{
if i8 == /1 
0xd0 $0 return emit!5
else
0xc0 $0 i8 return emit!5
}
0xd3 $0 cl shr rm16 /5
shr rm /16 i8 
{
if i8 == /1 
0xd1 $0 return emit!5
else
0xc1 $0 i8 return emit!5
}
0xd3 $0 cl shr rm32 /5
shr rm /32 i8 
{
if i8 == /1 
0xd1 $0 return emit!5
else
0xc1 $0 i8 return emit!5
}
0xd3 $0 cl shr rm64 /5
shr rm /64 i8 
{
if i8 == /1 
0xd1 $0 return emit!5
else
0xc1 $0 i8 return emit!5
}

0xd2 $0 cl rcl rm8 /2
rcl rm /8 i8 
{
if i8 == /1 
0xd0 $0 return emit!2
else
0xc0 $0 i8 return emit!2
}
0xd3 $0 cl rcl rm16 /2
rcl rm /16 i8 
{
if i8 == /1 
0xd1 $0 return emit!2
else
0xc1 $0 i8 return emit!2
}
0xd3 $0 cl rcl rm32 /2
rcl rm /32 i8 
{
if i8 == /1 
0xd1 $0 return emit!2
else
0xc1 $0 i8 return emit!2
}
0xd3 $0 cl rcl rm64 /2
rcl rm /64 i8 
{
if i8 == /1 
0xd1 $0 return emit!2
else
0xc1 $0 i8 return emit!2
}

0xd2 $0 cl rcr rm8 /3
rcr rm /8 i8 
{
if i8 == /1 
0xd0 $0 return emit!3
else
0xc0 $0 i8 return emit!3
}
0xd3 $0 cl rcr rm16 /3
rcr rm /16 i8 
{
if i8 == /1 
0xd1 $0 return emit!3
else
0xc1 $0 i8 return emit!3
}
0xd3 $0 cl rcr rm32 /3
rcr rm /32 i8 
{
if i8 == /1 
0xd1 $0 return emit!3
else
0xc1 $0 i8 return emit!3
}
0xd3 $0 cl rcr rm64 /3
rcr rm /64 i8 
{
if i8 == /1 
0xd1 $0 return emit!3
else
0xc1 $0 i8 return emit!3
}

0xd2 $0 cl rol rm8
rol rm /8 i8 
{
if i8 == /1 
0xd0 $0 return emit!0
else
0xc0 $0 i8 return emit!0
}
0xd3 $0 cl rol rm16
rol rm /16 i8 
{
if i8 == /1 
0xd1 $0 return emit!0
else
0xc1 $0 i8 return emit!0
}
0xd3 $0 cl rol rm32
rol rm /32 i8 
{
if i8 == /1 
0xd1 $0 return emit!0
else
0xc1 $0 i8 return emit!0
}
0xd3 $0 cl rol rm64
rol rm /64 i8 
{
if i8 == /1 
0xd1 $0 return emit!0
else
0xc1 $0 i8 return emit!0
}

0xd2 $0 cl ror rm8 /1
ror rm /8 i8 
{
if i8 == /1 
0xd0 $0 return emit!1
else
0xc0 $0 i8 return emit!1
}
0xd3 $0 cl ror rm16 /1
ror rm /16 i8 
{
if i8 == /1 
0xd1 $0 return emit!1
else
0xc1 $0 i8 return emit!1
}
0xd3 $0 cl ror rm32 /1
ror rm /32 i8 
{
if i8 == /1 
0xd1 $0 return emit!1
else
0xc1 $0 i8 return emit!1
}
0xd3 $0 cl ror rm64 /1
ror rm /64 i8 
{
if i8 == /1 
0xd1 $0 return emit!1
else
0xc1 $0 i8 return emit!1
}

0xf0 0x00 $0 verr rm16 /4
0xf0 0x00 $0 verw rm16 /5

0xa8 i8 test i8
0xa9 i16 test i16
0xa9 i32 test i32

0xf6 $0 i8 test rm i8 rm8
0xf7 $0 i16 test rm i16 rm16
0xf7 $0 i32 test rm i32 rm32
0xf7 $0 cast long i32 test rm i32 rm64

0x84 $0 $1 test rm r8 rm8
0x85 $0 $1 test rm r16 rm16
0x85 $0 $1 test rm r32 rm32
0x85 $0 $1 test rm r64 rm64

0x8f $0 pop m16
static if !X64 
0x8f $0 pop m32 /r
static if X64 
0x8f $0 pop m64 /r

0x58 $0 pop r16 /e /e
static if !X64 
0x58 $0 pop r32 /e /e
static if X64 
0x58 $0 pop r64 /e /e
0x1f popds
0x07 popes
0x17 popss
0x0f 0xa1 popfs
0x0f 0xa9 popgs
0x61 popa
0x61 popad
0x9d popf
0x9d popfd
0x9d popfq

0xff $0 push m16 /6
static if !X64 
0xff $0 push m32 /6 /r
static if X64 
0xff $0 push m64 /6 /r

0x50 $0 push r16 /e /e
static if !X64 
0x50 $0 push r32 /e /e
static if X64 
0x50 $0 push r64 /e /e

0x6a i8 push i8
0x68 i16 push i16
0x68 i32 push i32
0x0e pushcs
0x16 pushss
0x1e pushds
0x06 pushes
0x0f 0xa0 pushfs
0x0f 0xa8 pushgs
0x60 pusha
0x60 pushad
0x9c pushf
0x9c pushfd
0x9c pushfq

0x0f 0xc0 $0 $1 xadd rm r8 rm8
0x0f 0xc1 $0 $1 xadd rm r16 rm16
0x0f 0xc1 $0 $1 xadd rm r32 rm32
0x0f 0xc1 $0 $1 xadd rm r64 rm64

xchg r16 /e /90 $0 
xchg r32 /e /90 $0 
xchg r64 /e /90 $0 

0x86 $0 $1 xchg A B A B A /8 && valid! B8
0x87 $0 $1 xchg A B A B A /16 && valid! B16
0x87 $0 $1 xchg A B A B A /32 && valid! B32
0x87 $0 $1 xchg A B A B A /64 && valid! B64
0xd7 xlat
static if !X64 
0xd7 xlatb
static if X64 
0x48 0xd7 xlatb

0x0f 0x02 $0 $1 lar r16 m16
0x0f 0x02 $0 $1 lar r16 r16
0x0f 0x02 $0 $1 lar r32 m16
0x0f 0x02 $0 $1 lar r32 r32
0x27 daa
0x2f das

0xf6 $0 mul rm8 /4
0xf7 $0 mul rm16 /4
0xf7 $0 mul rm32 /4
0xf7 $0 mul rm64 /4

0xf6 $0 imul rm8 /5
0xf7 $0 imul rm16 /5
0xf7 $0 imul rm32 /5
0xf7 $0 imul rm64 /5

0x0f 0xaf $0 $1 imul r16 rm16
0x0f 0xaf $0 $1 imul r32 rm32
0x0f 0xaf $0 $1 imul r64 rm64

0x6b $0 $1 i8 imul r16 rm i8 rm16
0x6b $0 $1 i8 imul r32 rm i8 rm32
0x6b $0 $1 i8 imul r64 rm i8 rm64
0x69 $0 $1 i16 imul r16 rm i16 rm16
0x69 $0 $1 i32 imul r32 rm i32 rm32
0x69 $0 $1 i32 imul r64 rm i32 rm64

0xf6 $0 div rm8 /6
0xf7 $0 div rm16 /6
0xf7 $0 div rm32 /6
0xf7 $0 div rm64 /6

0xf6 $0 idiv rm8 /7
0xf7 $0 idiv rm16 /7
0xf7 $0 idiv rm32 /7
0xf7 $0 idiv rm64 /7

0x88 $0 $1 mov rm r8 rm8
0x89 $0 $1 mov rm r16 rm16
0x89 $0 $1 mov rm r32 rm32
0x89 $0 $1 mov rm r64 rm64

0x8a $0 $1 mov r8 m8
0x8b $0 $1 mov r16 m16
0x8b $0 $1 mov r32 m32
0x8b $0 $1 mov r64 m64

0xb0 $0 i8 mov r8 i8 /e
0xb8 $0 i16 mov r16 i16 /e
0xb8 $0 i32 mov r32 i32 /e
0xb8 $0 i64 mov r64 ulong i64 /e

0xc6 $0 i8 mov m8 i8
0xc7 $0 i16 mov m16 i16
0xc7 $0 i32 mov m32 i32
0xc7 $0 i32 mov m64 i32

0x0f 0x20 $0 $1 mov r32 Cr
0x0f 0x20 $0 $1 mov r64 Cr
0x0f 0x22 $0 $1 mov Cr r32
0x0f 0x22 $0 $1 mov Cr r64

0x0f 0x21 $0 $1 mov r32 Dr
0x0f 0x21 $0 $1 mov r64 Dr
0x0f 0x23 $0 $1 mov Dr r32
0x0f 0x23 $0 $1 mov Dr r64

0x0f 0xbe $0 $1 movsx r16 rm8
0x0f 0xbe $0 $1 movsx r32 rm8
0x0f 0xbe $0 $1 movsx r64 rm8

0x0f 0xbf $0 $1 movsx r32 rm16
0x0f 0xbf $0 $1 movsx r64 rm16

0x63 $0 $1 movsxd r16 rm16
0x63 $0 $1 movsxd r32 rm32
0x63 $0 $1 movsxd r64 rm32

0x0f 0xb6 $0 $1 movzx r16 rm8
0x0f 0xb6 $0 $1 movzx r32 rm8
0x0f 0xb6 $0 $1 movzx r64 rm8

0x0f 0xb7 $0 $1 movzx r32 rm16
0x0f 0xb7 $0 $1 movzx r64 rm16

0xe8 i16 call i16
0xe8 i32 call i32

0xff $0 call r16 /2
0xff $0 call r32 /2
0xff $0 call r64 /2

0xff $0 call m16 /3
0xff $0 call m32 /3
0xff $0 call m64 /3

loop string name branches ~= tuple cast ptrdiff_t buffer.length name "loop" name !in labels 
loope string name branches ~= tuple cast ptrdiff_t buffer.length name "loope" name !in labels 
loopne string name branches ~= tuple cast ptrdiff_t buffer.length name "loopne" name !in labels 

jmp string name branches ~= tuple cast ptrdiff_t buffer.length name "jmp" name !in labels 
0xff $0 jmp rm16 /4
0xff $0 jmp rm32 /4
0xff $0 jmp rm64 /4
0xff $0 /* jmp m16 /5
0xff $0 jmp m32 /5
0xff $0 */jmp m64 /5

0xea i16 jmp i16
0xea i32 jmp i32

ja string name branches ~= tuple cast ptrdiff_t buffer.length name "ja" name !in labels 
jae string name branches ~= tuple cast ptrdiff_t buffer.length name "jae" name !in labels 
jb string name branches ~= tuple cast ptrdiff_t buffer.length name "jb" name !in labels 
jbe string name branches ~= tuple cast ptrdiff_t buffer.length name "jbe" name !in labels 
jc string name branches ~= tuple cast ptrdiff_t buffer.length name "jc" name !in labels 
jcxz string name branches ~= tuple cast ptrdiff_t buffer.length name "jcxz" name !in labels 
jecxz string name branches ~= tuple cast ptrdiff_t buffer.length name "jecxz" name !in labels 
jrcxz string name branches ~= tuple cast ptrdiff_t buffer.length name "jrcxz" name !in labels 
je string name branches ~= tuple cast ptrdiff_t buffer.length name "je" name !in labels 
jg string name branches ~= tuple cast ptrdiff_t buffer.length name "jg" name !in labels 
jge string name branches ~= tuple cast ptrdiff_t buffer.length name "jge" name !in labels 
jl string name branches ~= tuple cast ptrdiff_t buffer.length name "jl" name !in labels 
jle string name branches ~= tuple cast ptrdiff_t buffer.length name "jle" name !in labels 
jna string name branches ~= tuple cast ptrdiff_t buffer.length name "jna" name !in labels 
jnae string name branches ~= tuple cast ptrdiff_t buffer.length name "jnae" name !in labels 
jnb string name branches ~= tuple cast ptrdiff_t buffer.length name "jnb" name !in labels 
jnbe string name branches ~= tuple cast ptrdiff_t buffer.length name "jnbe" name !in labels 
jnc string name branches ~= tuple cast ptrdiff_t buffer.length name "jnc" name !in labels 
jne string name branches ~= tuple cast ptrdiff_t buffer.length name "jne" name !in labels 
jng string name branches ~= tuple cast ptrdiff_t buffer.length name "jng" name !in labels 
jnge string name branches ~= tuple cast ptrdiff_t buffer.length name "jnge" name !in labels 
jnl string name branches ~= tuple cast ptrdiff_t buffer.length name "jnl" name !in labels 
jnle string name branches ~= tuple cast ptrdiff_t buffer.length name "jnle" name !in labels 
jno string name branches ~= tuple cast ptrdiff_t buffer.length name "jno" name !in labels 
jnp string name branches ~= tuple cast ptrdiff_t buffer.length name "jnp" name !in labels 
jns string name branches ~= tuple cast ptrdiff_t buffer.length name "jns" name !in labels 
jnz string name branches ~= tuple cast ptrdiff_t buffer.length name "jnz" name !in labels 
jo string name branches ~= tuple cast ptrdiff_t buffer.length name "jo" name !in labels 
jp string name branches ~= tuple cast ptrdiff_t buffer.length name "jp" name !in labels 
jpe string name branches ~= tuple cast ptrdiff_t buffer.length name "jpe" name !in labels 
jpo string name branches ~= tuple cast ptrdiff_t buffer.length name "jpo" name !in labels 
js string name branches ~= tuple cast ptrdiff_t buffer.length name "js" name !in labels 
jz string name branches ~= tuple cast ptrdiff_t buffer.length name "jz" name !in labels 

rep size_t size 
{
buffer = buffer[0.. buffer.length - size ]~0xf3~buffer[ buffer.length - size ..$];
return size 1;
}

repe size_t size 
{
buffer = buffer[0.. buffer.length - size ]~0xf3~buffer[ buffer.length - size ..$];
return size 1;
}

repz size_t size 
{
buffer = buffer[0.. buffer.length - size ]~0xf3~buffer[ buffer.length - size ..$];
return size 1;
}

repne size_t size 
{
buffer = buffer[0.. buffer.length - size ]~0xf2~buffer[ buffer.length - size ..$];
return size 1;
}

repnz size_t size 
{
buffer = buffer[0.. buffer.length - size ]~0xf2~buffer[ buffer.length - size ..$];
return size 1;
}

0xa4 $0 $1 movs m8 m8
0xa5 $0 $1 movs m16 m16
0xa5 $0 $1 movs m32 m32
0xa5 $0 $1 movs m64 m64
0xa4 movsb
0x66 0xa5 movsw
0xa5 movsd
0x48 0xa5 movsq

0xa6 $0 $1 cmps m8 m8
0xa7 $0 $1 cmps m16 m16
0xa7 $0 $1 cmps m32 m32
0xa7 $0 $1 cmps m64 m64
0xa6 cmpsb
0x66 0xa7 cmpsw
0xa7 cmpsd
0x48 0xa7 cmpsq

0xae $0 scas m8
0xaf $0 scas m16
0xaf $0 scas m32
0xaf $0 scas m64
0xae scasb
0x66 0xaf scasw
0xaf scasd
0x48 0xaf scasq

0xac $0 lods m8
0xad $0 lods m16
0xad $0 lods m32
0xad $0 lods m64
0xac lodsb
0x66 0xad lodsw
0xad lodsd
0x48 0xad lodsq

0xaa $0 stos m8
0xab $0 stos m16
0xab $0 stos m32
0xab $0 stos m64
0xaa stosb
0x66 0xab stosw
0xab stosd
0x48 0xab stosq

0xe4 i8 inal i8
0xec inal

0xe5 i8 _in i8
0xed _in

0x6c $0 ins m8
0x6d $0 ins m16
0x6d $0 ins m32
0x6c insb
0x66 0x6d insw
0x6d insd

0xe6 i8 outal i8
0xee outal

0xe7 i8 _out i8
0xef _out

0x6e $0 outs m8
0x6f $0 outs m16
0x6f $0 outs m32
0x6e outsb
0x66 0x6f outsw
0x6f outsd

0x0f 0x97 $0 seta rm8
0x0f 0x93 $0 setae rm8
0x0f 0x92 $0 setb rm8
0x0f 0x96 $0 setbe rm8
0x0f 0x92 $0 setc rm8
0x0f 0x94 $0 sete rm8
0x0f 0x9f $0 setg rm8
0x0f 0x9d $0 setge rm8
0x0f 0x9c $0 setl rm8
0x0f 0x9e $0 setle rm8
0x0f 0x96 $0 setna rm8
0x0f 0x92 $0 setnae rm8
0x0f 0x93 $0 setnb rm8
0x0f 0x97 $0 setnbe rm8
0x0f 0x93 $0 setnc rm8
0x0f 0x95 $0 setne rm8
0x0f 0x9e $0 setng rm8
0x0f 0x9c $0 setnge rm8
0x0f 0x9d $0 setnl rm8
0x0f 0x9f $0 setnle rm8
0x0f 0x91 $0 setno rm8
0x0f 0x9b $0 setnp rm8
0x0f 0x99 $0 setns rm8
0x0f 0x95 $0 setnz rm8
0x0f 0x90 $0 seto rm8
0x0f 0x9a $0 setp rm8
0x0f 0x9a $0 setpe rm8
0x0f 0x9b $0 setpo rm8
0x0f 0x98 $0 sets rm8
0x0f 0x94 $0 setz rm8
m8 bytePtr ArGS... ArGS args m8 args 
m16 wordPtr ArGS... ArGS args m16 args 
m32 dwordPtr ArGS... ArGS args m32 args 
m64 qwordPtr ArGS... ArGS args m64 args 
m128 r128wordPtr ArGS... ArGS args m128 args 
m256 r256wordPtr ArGS... ArGS args m256 args 
m512 zmmwordPtr ArGS... ArGS args m512 args 
}
unittest
{
Block!true block;
with block 
{
mov eax ecx 
movsxd rcx eax 
mov ebx /1 
// TODO: pop and push are emitting rEX but shouldn't
pop rbx 
push rcx 
jl "a" 
label "a" 
popf 
// Not supported in 64-bit
//pusha 
ret 
retf /3 
jmp "a" 
jb "a" 
setz al 
//aad /17 
insb 
outal 
call /2 
lock add eax ebx 
xacquire_lock sub si di 
movsb 
// TODO: make emittable instructions condiitonal?
//daa 
//das 
//aaa 
//pushcs 
mov eax dwordPtr ebx 
0x67 when it should output rEX// TODO: This is outputting
mov eax dwordPtr rbx 
//verr si 
stc 
std 
clc 
wait 
fwait 
monitor 
lfence 
sfence 
retf 
test al bl 
hlt 
swapgs 
inc eax 
dec rax 
dec rdi 
sub rdi /10 
mul esi 
scasb 
cmpsb 
pause 
iret 
mov esp dwordPtr rdx 
pop rsp 
mov rbp rsp 
}
import tern.digest;
import std.stdio;
debug writeln block.finalize .toHexString 
}
unittest
{
import gallinule.asmi;
/*
//0fh 0fh $0 $1 9eh pfadd r64 rm64
0x0f 0x0f o0 o1 0x9e pfadd rm641 r64 orm641 o1 rm64164 /128

//0fh 0fh $0 $1 9ah pfsub r64 rm64
0x0f 0x0f o0 o1 0x9a pfsub rm641 r64 orm641 o1 rm64164 /128
*/
pragma msg parse! "3dnow.asmi" 
}